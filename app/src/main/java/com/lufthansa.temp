class HomeFragment : Fragment() {

    private lateinit var homeViewModel: HomeViewModel
    private var _binding: FragmentHomeBinding? = null

    // This property is only valid between onCreateView and
    // onDestroyView.
    private val binding get() = _binding!!

    var contador: Int = 1
    private var mInterstitialAd: InterstitialAd? = null


    @SuppressLint("ResourceAsColor")
    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?,
    ): View? {
        homeViewModel =
            ViewModelProvider(this).get(HomeViewModel::class.java)

        _binding = FragmentHomeBinding.inflate(inflater, container, false)
        val root: View = binding.root

        binding.chipMale.text = getString(R.string.male)
        binding.chipFemale.text = getString(R.string.female)

        binding.npAge.minValue = 0
        binding.npAge.maxValue = lista.size - 1
        binding.npAge.displayedValues = lista


        binding.npHeight.minValue = 50
        binding.npHeight.maxValue = 220

        binding.npWeight.minValue = 10
        binding.npWeight.maxValue = 150

        binding.chipMale.setOnClickListener {
            genderSelected = "male"
            genero_final = getString(R.string.male)
        }
        binding.chipFemale.setOnClickListener {
            genderSelected = "female"
            genero_final = getString(R.string.female)
        }
        binding.button.setOnClickListener {


            contador += 1
            if (contador %2 ==0){
                Log.d("contador", contador.toString())
                showInterstitial()
                initInterstitial()
            }
            else{
                Log.d("contador", contador.toString())
                initInterstitial()
            }


            val age = binding.npAge.value.toString()
            val edadReal = lista.get(age.toInt())
            val altura = binding.npHeight.value
            val peso = binding.npWeight.value
/*
            Toast.makeText(requireActivity(),
                genderSelected + " " + binding.npHeight.value.toString() + "cm "
                        + lista.get(age.toInt()) + "y:a "
                        + binding.npWeight.value.toString() + "Kg ",
                Toast.LENGTH_SHORT).show()

 */
            conEdadyMuestraListaValores(age)
            calcularIMC(edadReal, altura, peso)
        }
        initInterstitial()
        return root
    }

    private fun initInterstitial() {
        var adRequest2 = AdRequest.Builder().build()
        //test ca-app-pub-3940256099942544/1033173712  bueno ca-app-pub-3333076188215080/3203796572
        InterstitialAd.load(requireActivity(),"ca-app-pub-3333076188215080/3203796572", adRequest2, object : InterstitialAdLoadCallback() {
            override fun onAdFailedToLoad(adError: LoadAdError) {
                Log.d("contador", adError?.message)
                mInterstitialAd = null
            }

            override fun onAdLoaded(interstitialAd: InterstitialAd) {
                Log.d("contador", "Ad was loaded.")
                mInterstitialAd = interstitialAd
            }
        })
    }
    fun showInterstitial(){
        Log.d("contador","mInterstitialAd?.show(this)")
        mInterstitialAd?.show(requireActivity())
    }

    private fun calcularIMC(edadReal: String, altura: Int, peso: Int) {
        var alturaF: Float = altura.toFloat()
        alturaF /= 100
        altura_final = alturaF
        val IMC = peso / (alturaF * alturaF)
        peso_final = peso
        /*
        Toast.makeText(requireActivity(),
            "IMC: ${IMC} - Edad: ${edadReal} - Altura: ${alturaF} m",
            Toast.LENGTH_SHORT).show()

         */
        // tengo IMC, y edadReal
        clasificaIMC(IMC, edadReal)
    }

    private fun clasificaIMC(imc: Float, edadReal: String) {
        var maplinea = lineaIMC(edadReal)
        when (genderSelected){
            "male"   ->  { maplinea = lineaIMC(edadReal)  }
            "female" ->  { maplinea = lineaIMCF(edadReal) }
        }
        //Recorrer la linea, y clasificar el IMC
        val lineaExtremeThin = 0
        val lineaThin = 1
        val lineaSobrePeso = 4
        val lineaObe = 5

        val edadSeparada: List<String> = edadReal.split(":")
        /*
        Toast.makeText(requireActivity(),
            "${edadSeparada[0]} " + requireActivity().getString(R.string.years) + " ${edadSeparada[1]} " +
                    requireActivity().getString(R.string.months),
            Toast.LENGTH_SHORT).show()

         */

        var edadyears = edadSeparada[0]
        var edadmonths = edadSeparada[1]

        if (maplinea != null) {

            if (imc <= maplinea.get(lineaExtremeThin)) {
                Toast.makeText(requireActivity(),
                    requireActivity().getString(R.string.extremeThin),
                    Toast.LENGTH_LONG).show()
                categoria = requireActivity().getString(R.string.extremeThin)

            } else if (imc > maplinea.get(lineaExtremeThin) && imc <= maplinea.get(lineaThin)) {
                Toast.makeText(requireActivity(),
                    requireActivity().getString(R.string.thin),
                    Toast.LENGTH_LONG).show()
                categoria = requireActivity().getString(R.string.thin)
            } else if (imc > maplinea.get(lineaThin) && imc <= maplinea.get(lineaSobrePeso)) {
                Toast.makeText(requireActivity(),
                    requireActivity().getString(R.string.normal),
                    Toast.LENGTH_LONG).show()
                categoria = requireActivity().getString(R.string.normal)

            } else if (imc > maplinea.get(lineaSobrePeso) && imc <= maplinea.get(lineaObe)) {
                Toast.makeText(requireActivity(),
                    requireActivity().getString(R.string.overweight),
                    Toast.LENGTH_LONG).show()
                categoria = requireActivity().getString(R.string.overweight)

            } else if (imc > maplinea.get(lineaObe)) {
                Toast.makeText(requireActivity(), requireActivity().getString(R.string.obesity),
                    Toast.LENGTH_LONG).show()
                categoria = requireActivity().getString(R.string.obesity)
            }
            imc_final = imc
            edadyears_final = edadyears.toInt()
            edadmonths_final = edadmonths.toInt()

            val i = Intent(requireActivity(), results::class.java)
            startActivity(i)
        }
    }


    private fun conEdadyMuestraListaValores(age: String) {
        val indiceEdad = lista.get(age.toInt())
        if(genderSelected == "male") {
            lineaIMC(indiceEdad)
        }
        else if (genderSelected == "female"){
            lineaIMCF(indiceEdad)
        }
        /*
        Toast.makeText(requireActivity(),
            "Los valores son: ${indiceEdad} - ${mapF5[indiceEdad]}",
            Toast.LENGTH_SHORT).show()

         */
    }

    private fun lineaIMC(indiceEdad: String): List<Double>? = mapM5[indiceEdad]
    private fun lineaIMCF(indiceEdad: String) : List<Double>? = mapF5[indiceEdad]


    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
